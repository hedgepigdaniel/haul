{"version":3,"sources":["../../src/runtime/Runtime.ts"],"names":["Runtime","constructor","inspectorClient","logger","Logger","ready","waitForInspector","startCommand","command","argv","emitEvent","RuntimeCommandStartEvent","join","unhandledError","error","RuntimeUnhandledErrorEvent","nodeInspectorStarted","wait","RuntimeNodeInspectorStartedEvent","complete","exitCode","dispose","RuntimeCompleteEvent","close","terminal","processExit"],"mappings":"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","sourcesContent":["import {\n  RuntimeCompleteEvent,\n  RuntimeCommandStartEvent,\n  RuntimeUnhandledErrorEvent,\n  RuntimeNodeInspectorStartedEvent,\n} from '@haul-bundler/inspector-events';\nimport { terminal } from 'terminal-kit';\nimport InspectorClient from './InspectorClient';\nimport Logger from './Logger';\n\nexport default class Runtime {\n  logger: Logger;\n\n  constructor(private inspectorClient?: InspectorClient) {\n    this.logger = new Logger(inspectorClient);\n  }\n\n  async ready(waitForInspector: boolean = false): Promise<void> {\n    if (waitForInspector && this.inspectorClient) {\n      await this.inspectorClient.ready();\n    }\n  }\n\n  startCommand(command: string | readonly string[], argv: string[]) {\n    if (this.inspectorClient) {\n      this.inspectorClient.emitEvent(\n        new RuntimeCommandStartEvent(\n          typeof command === 'string' ? command : command.join(' '),\n          argv\n        )\n      );\n    }\n  }\n\n  unhandledError(error: Error | string) {\n    this.logger.error('Unhandled error:', error);\n    if (this.inspectorClient) {\n      this.inspectorClient.emitEvent(new RuntimeUnhandledErrorEvent(error));\n    }\n  }\n\n  nodeInspectorStarted(wait: boolean = false) {\n    if (this.inspectorClient) {\n      this.inspectorClient.emitEvent(\n        new RuntimeNodeInspectorStartedEvent(wait)\n      );\n    }\n  }\n\n  complete(exitCode: number = 0) {\n    this.logger.dispose();\n    if (this.inspectorClient) {\n      this.inspectorClient.emitEvent(new RuntimeCompleteEvent(exitCode));\n      this.inspectorClient.close();\n    }\n    terminal.processExit(exitCode);\n  }\n}\n"],"file":"Runtime.js"}