{"version":3,"sources":["../../src/runtime/InspectorClient.ts"],"names":["InspectorClient","constructor","host","port","connect","process","pid","ready","Promise","resolve","onReady","close","shouldExit","socket","address","WebSocket","timeout","setTimeout","on","clearTimeout","buffer","forEach","event","emitEvent","undefined","send","serialize","push"],"mappingse,MAAMA,eAAN,CAAsB;AAMnCC,EAAAA,WAAW,CAACC,IAAD,EAAgBC,IAAhB,EAA+B;AAAA;;AAAA,+DAJ7B,KAI6B;;AAAA,2DAHf,EAGe;;AAAA,4DAFhC,MAAM;AAAA;AAAE,KAEwB;;AAAA;AAAA;AACxC,SAAKC,OAAL,CACG,QAAO,0BAAAF,IAAI,+BAAI,WAAJ,CAAgB,IAAG,0BAAAC,IAAI,+BAAI,IAAJ,CAAS,QAAOE,OAAO,CAACC,GAAI,EADjE;AAGD;AAED;;;;;AAGA,QAAMC,KAAN,GAAc;AAAA;AAAA;AACZ,WAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAAA;AAAA;AAC5B,WAAKC,OAAL,GAAeD,OAAf;AACD,KAFM,CAAP;AAGD;;AAEDE,EAAAA,KAAK,GAAG;AAAA;AAAA;AACN,SAAKC,UAAL,GAAkB,IAAlB;AADM;;AAEN,QAAI,KAAKC,MAAT,EAAiB;AAAA;AAAA;AACf,WAAKA,MAAL,CAAYF,KAAZ;AACD,KAFD;AAAA;AAAA;AAGD;;AAEOP,EAAAA,OAAR,CAAgBU,OAAhB,EAAiC;AAAA;AAC/B,UAAMD,MAAM,0BAAG,IAAIE,WAAJ,CAAcD,OAAd,CAAH,CAAZ;AACA,UAAME,OAAO,2BAAGC,UAAU,CAAC,MAAM;AAAA;AAAA;AAC/BJ,MAAAA,MAAM,CAACF,KAAP;AAD+B;AAE/B,WAAKP,OAAL,CAAaU,OAAb;AACD,KAHyB,EAGvB,KAHuB,CAAb,CAAb;AAF+B;AAO/BD,IAAAA,MAAM,CAACK,EAAP,CAAU,MAAV,EAAkB,MAAM;AAAA;AAAA;AACtB,WAAKL,MAAL,GAAcA,MAAd;AADsB;AAEtBM,MAAAA,YAAY,CAACH,OAAD,CAAZ;AAFsB;AAGtB,WAAKN,OAAL;AAHsB;AAItB,WAAKU,MAAL,CAAYC,OAAZ,CAAoBC,KAAK,IAAI;AAAA;AAAA;AAAA,oBAAKC,SAAL,CAAeD,KAAf;AAAqB,OAAlD;AACD,KALD;AAP+B;AAc/BT,IAAAA,MAAM,CAACK,EAAP,CAAU,OAAV,EAAmB,MAAM;AAAA;AAAA;AACvB,WAAKL,MAAL,GAAcW,SAAd;AADuB;AAEvBX,MAAAA,MAAM,CAACF,KAAP;AAFuB;;AAGvB,UAAI,CAAC,KAAKC,UAAV,EAAsB;AAAA;AAAA;AACpBK,QAAAA,UAAU,CAAC,MAAM;AAAA;AAAA;AACf,eAAKb,OAAL,CAAaU,OAAb;AACD,SAFS,EAEP,IAFO,CAAV;AAGD,OAJD;AAAA;AAAA;AAKD,KARD;AAd+B;AAwB/BD,IAAAA,MAAM,CAACK,EAAP,CAAU,OAAV,EAAmB,MAAM;AAAA;AAAA;AACvB,WAAKL,MAAL,GAAcW,SAAd;AADuB;AAEvBX,MAAAA,MAAM,CAACF,KAAP;AAFuB;;AAGvB,UAAI,CAAC,KAAKC,UAAV,EAAsB;AAAA;AAAA;AACpBK,QAAAA,UAAU,CAAC,MAAM;AAAA;AAAA;AACf,eAAKb,OAAL,CAAaU,OAAb;AACD,SAFS,EAEP,IAFO,CAAV;AAGD,OAJD;AAAA;AAAA;AAKD,KARD;AASD;;AAEDS,EAAAA,SAAS,CAACD,KAAD,EAAwB;AAAA;AAAA;;AAC/B,QAAI,KAAKT,MAAT,EAAiB;AAAA;AAAA;AACf,WAAKA,MAAL,CAAYY,IAAZ,CAAiBH,KAAK,CAACI,SAAN,EAAjB;AACD,KAFD,MAEO;AAAA;AAAA;AACL,WAAKN,MAAL,CAAYO,IAAZ,CAAiBL,KAAjB;AACD;AACF;;AArEkC","sourcesContent":["import WebSocket from 'ws';\nimport { InspectorEvent } from '@haul-bundler/inspector-events';\n\nexport default class InspectorClient {\n  socket?: WebSocket;\n  shouldExit = false;\n  buffer: InspectorEvent[] = [];\n  onReady = () => {};\n\n  constructor(host?: string, port?: string) {\n    this.connect(\n      `ws://${host || 'localhost'}:${port || 7777}?pid=${process.pid}`\n    );\n  }\n\n  /**\n   * Used only when Haul process should wait for connection with inspector.\n   */\n  async ready() {\n    return new Promise(resolve => {\n      this.onReady = resolve;\n    });\n  }\n\n  close() {\n    this.shouldExit = true;\n    if (this.socket) {\n      this.socket.close();\n    }\n  }\n\n  private connect(address: string) {\n    const socket = new WebSocket(address);\n    const timeout = setTimeout(() => {\n      socket.close();\n      this.connect(address);\n    }, 10000);\n\n    socket.on('open', () => {\n      this.socket = socket;\n      clearTimeout(timeout);\n      this.onReady();\n      this.buffer.forEach(event => this.emitEvent(event));\n    });\n\n    socket.on('close', () => {\n      this.socket = undefined;\n      socket.close();\n      if (!this.shouldExit) {\n        setTimeout(() => {\n          this.connect(address);\n        }, 5000);\n      }\n    });\n\n    socket.on('error', () => {\n      this.socket = undefined;\n      socket.close();\n      if (!this.shouldExit) {\n        setTimeout(() => {\n          this.connect(address);\n        }, 5000);\n      }\n    });\n  }\n\n  emitEvent(event: InspectorEvent) {\n    if (this.socket) {\n      this.socket.send(event.serialize());\n    } else {\n      this.buffer.push(event);\n    }\n  }\n}\n"],"file":"InspectorClient.js"}