{"version":3,"sources":["../../src/runtime/Logger.ts"],"names":["LoggerLevel","levelToPriorityMappings","Debug","Info","Done","Warn","Error","levelToColorMappings","Logger","constructor","inspectorClient","createLoggingFunction","handler","proxyHandler","undefined","args","console","log","enhancer","stringify","join","build","level","enableFileLogging","filename","json","absFilename","path","isAbsolute","resolve","logFile","fs","openSync","logAsJson","dispose","closeSync","map","item","depth","maxArrayLength","breakLength","Infinity","emitEvent","LoggerEvent","rawArgs","stripAnsi","appendFileSync","JSON","timestamp","Date","messages","toISOString","minLoggingLevel","print","enhanceWithLevel"],"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","sourcesContent":["import { inspect } from 'util';\nimport fs from 'fs';\nimport path from 'path';\nimport stripAnsi from 'strip-ansi';\nimport { LoggerEvent } from '@haul-bundler/inspector-events';\nimport {\n  container,\n  color,\n  modifier,\n  pad,\n  AnsiColor,\n  AnsiModifier,\n} from 'ansi-fragments';\nimport InspectorClient from './InspectorClient';\n\nenum LoggerLevel {\n  Debug = 'debug',\n  Info = 'info',\n  Warn = 'warn',\n  Error = 'error',\n  Done = 'done',\n}\n\nconst levelToPriorityMappings = {\n  [LoggerLevel.Debug]: 0,\n  [LoggerLevel.Info]: 1,\n  [LoggerLevel.Done]: 2,\n  [LoggerLevel.Warn]: 3,\n  [LoggerLevel.Error]: 4,\n};\n\nconst levelToColorMappings = {\n  [LoggerLevel.Info]: 'blue' as AnsiColor,\n  [LoggerLevel.Warn]: 'yellow' as AnsiColor,\n  [LoggerLevel.Error]: 'red' as AnsiColor,\n  [LoggerLevel.Done]: 'green' as AnsiColor,\n  [LoggerLevel.Debug]: 'gray' as AnsiColor,\n};\n\ntype ProxyHandler = (level: LoggerLevel, ...args: unknown[]) => void;\nexport default class Logger {\n  static Level = LoggerLevel;\n  static LevelColorMapping = levelToColorMappings;\n\n  private proxyHandler: ProxyHandler | undefined;\n  private logFile: number | undefined;\n  private logAsJson = false;\n  public minLoggingLevel: LoggerLevel = LoggerLevel.Info;\n\n  constructor(private inspectorClient?: InspectorClient) {}\n\n  /**\n   * Enables logging all messages to file as well as to process' STDOUT.\n   * If `json` is `true` each log will be in JSON format for easier processing.\n   * If relative `filename` is passed, it will be resolved based on process' CWD.\n   */\n  enableFileLogging(filename: string, { json }: { json: boolean }) {\n    const absFilename = path.isAbsolute(filename)\n      ? filename\n      : path.resolve(filename);\n    this.logFile = fs.openSync(absFilename, 'a');\n    this.logAsJson = json;\n  }\n\n  /**\n   * Disposes the logger by closing all open handles.\n   * If file logging was enabled, the file descriptor will be closed here.\n   * Should always be called before exiting from process.\n   */\n  dispose() {\n    if (this.logFile !== undefined) {\n      fs.closeSync(this.logFile);\n    }\n  }\n\n  info = this.createLoggingFunction(LoggerLevel.Info);\n  warn = this.createLoggingFunction(LoggerLevel.Warn);\n  error = this.createLoggingFunction(LoggerLevel.Error);\n  done = this.createLoggingFunction(LoggerLevel.Done);\n  debug = this.createLoggingFunction(LoggerLevel.Debug);\n\n  /**\n   * Enables proxy for all logs.\n   * Messages will be passed to `handler` function and __won't be logged__ to process' STDOUT.\n   * Returns a dispose function to disable the proxy.\n   */\n  proxy = (handler: ProxyHandler): (() => void) => {\n    this.proxyHandler = handler;\n    return () => {\n      this.proxyHandler = undefined;\n    };\n  };\n\n  /**\n   * Prints arguments _as is_ without any processing.\n   */\n  print = (...args: unknown[]) => {\n    // eslint-disable-next-line no-console\n    console.log(...args);\n  };\n\n  /**\n   * Enhances given arguments with ANSI color.\n   */\n  enhanceWithColor = (enhancer: AnsiColor, ...args: unknown[]) => {\n    return color(enhancer, this.stringify(args).join(' ')).build();\n  };\n\n  /**\n   * Enhances given arguments with ANSI modifier, for example with `bold`, `italic` etc.\n   */\n  enhanceWithModifier = (enhancer: AnsiModifier, ...args: unknown[]) => {\n    return modifier(enhancer, this.stringify(args).join(' ')).build();\n  };\n\n  /**\n   * Enhances given arguments with level prefix.\n   * Example: info ▶︎ argument1 argument2\n   */\n  enhanceWithLevel = (level: LoggerLevel, ...args: unknown[]) => {\n    return container(\n      color(levelToColorMappings[level], modifier('bold', level)),\n      pad(1),\n      '▶︎',\n      pad(1),\n      this.stringify(args).join(' ')\n    ).build();\n  };\n\n  /**\n   * Stringify array of elements into a string array.\n   * Uses Node's built-in `util.inspect` function to stringify non-string elements.\n   */\n  stringify(args: any[]) {\n    return args.map(item =>\n      typeof item === 'string'\n        ? item\n        : inspect(item, {\n            depth: null,\n            maxArrayLength: null,\n            breakLength: Infinity,\n          })\n    );\n  }\n\n  private createLoggingFunction(level: LoggerLevel) {\n    return (...args: unknown[]) => {\n      if (this.inspectorClient) {\n        this.inspectorClient.emitEvent(new LoggerEvent(level, args));\n      }\n\n      if (this.logFile !== undefined) {\n        const rawArgs = this.stringify(args).map(stripAnsi);\n        fs.appendFileSync(\n          this.logFile,\n          (this.logAsJson\n            ? stripAnsi(\n                JSON.stringify({\n                  timestamp: new Date(),\n                  level,\n                  messages: rawArgs,\n                })\n              )\n            : `[${new Date().toISOString()}] ${level}: ${rawArgs.join(' ')}`) +\n            '\\n',\n          'utf8'\n        );\n      }\n\n      if (\n        levelToPriorityMappings[level] >=\n        levelToPriorityMappings[this.minLoggingLevel]\n      ) {\n        if (this.proxyHandler) {\n          this.proxyHandler(level, ...args);\n        } else {\n          this.print(this.enhanceWithLevel(level, ...args));\n        }\n      }\n    };\n  }\n}\n"],"file":"Logger.js"}