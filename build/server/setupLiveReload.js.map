{"version":3,"sources":["../../src/server/setupLiveReload.ts"],"names":["setupLiveReload","runtime","server","compiler","watchers","headers","notifyAllWatchers","forEach","watcher","res","writeHead","end","JSON","stringify","changed","on","Compiler","Events","BUILD_FINISHED","route","method","path","handler","request","Promise","resolve","raw","push","req","splice","indexOf","logger","info"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;AAEe,SAASA,eAAT,CACbC,OADa,EAEbC,MAFa,EAGbC,QAHa,EAIb;AAAA;AACA,MAAIC,QAA0B,2BAAG,EAAH,CAA9B;AACA,QAAMC,OAAO,2BAAG;AACd,oBAAgB;AADF,GAAH,CAAb;;AAIA,WAASC,iBAAT,GAA6B;AAAA;AAAA;AAC3BF,IAAAA,QAAQ,CAACG,OAAT,CAAiBC,OAAO,IAAI;AAAA;AAAA;AAC1BA,MAAAA,OAAO,CAACC,GAAR,CAAYC,SAAZ,CAAsB,GAAtB,EAA2BL,OAA3B;AAD0B;AAE1BG,MAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ,CAAgBC,IAAI,CAACC,SAAL,CAAe;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAf,CAAhB;AACD,KAHD;AAD2B;AAM3BV,IAAAA,QAAQ,GAAG,EAAX;AACD;;AAbD;AAeAD,EAAAA,QAAQ,CAACY,EAAT,CAAYC,kBAASC,MAAT,CAAgBC,cAA5B,EAA4C,MAAM;AAAA;AAAA;AAChDZ,IAAAA,iBAAiB;AAClB,GAFD;AAfA;AAmBAJ,EAAAA,MAAM,CAACiB,KAAP,CAAa;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,IAAI,EAAE,WAFK;AAGXC,IAAAA,OAAO,EAAEC,OAAO,IACd;AAAA;AAAA;AAAA,iBAAIC,OAAJ,CAAYC,OAAO,IAAI;AAAA;;AACrB;;;;AAIA,cAAMjB,OAAO,4BAAGe,OAAO,CAACG,GAAX,CAAb;AALqB;AAMrBtB,QAAAA,QAAQ,CAACuB,IAAT,CAAcnB,OAAd;AANqB;AAOrBA,QAAAA,OAAO,CAACoB,GAAR,CAAYb,EAAZ,CAAe,OAAf,EAAwB,MAAM;AAAA;AAAA;AAC5BX,UAAAA,QAAQ,CAACyB,MAAT,CAAgBzB,QAAQ,CAAC0B,OAAT,CAAiBtB,OAAjB,CAAhB,EAA2C,CAA3C;AAD4B;AAE5BiB,UAAAA,OAAO,CAAC,IAAD,CAAP;AACD,SAHD;AAID,OAXD;AAWE;AAfO,GAAb;AAnBA;AAqCAvB,EAAAA,MAAM,CAACiB,KAAP,CAAa;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,IAAI,EAAE,YAFK;AAGXC,IAAAA,OAAO,EAAE,MAAM;AAAA;AAAA;AACbrB,MAAAA,OAAO,CAAC8B,MAAR,CAAeC,IAAf,CACE,uEADF;AADa;AAIb1B,MAAAA,iBAAiB;AAJJ;AAKb,aAAO,IAAP;AACD;AATU,GAAb;AAWD","sourcesContent":["import Hapi, { Request } from '@hapi/hapi';\nimport Runtime from '../runtime/Runtime';\n// @ts-ignore\nimport Compiler from '@haul-bundler/core-legacy/build/compiler/Compiler';\n\nexport default function setupLiveReload(\n  runtime: Runtime,\n  server: Hapi.Server,\n  compiler: any\n) {\n  let watchers: Request['raw'][] = [];\n  const headers = {\n    'Content-Type': 'application/json; charset=UTF-8',\n  };\n\n  function notifyAllWatchers() {\n    watchers.forEach(watcher => {\n      watcher.res.writeHead(205, headers);\n      watcher.res.end(JSON.stringify({ changed: true }));\n    });\n\n    watchers = [];\n  }\n\n  compiler.on(Compiler.Events.BUILD_FINISHED, () => {\n    notifyAllWatchers();\n  });\n\n  server.route({\n    method: 'GET',\n    path: '/onchange',\n    handler: request =>\n      new Promise(resolve => {\n        /**\n         * React Native client opens connection at `/onchange`\n         * and awaits reload signal (http status code - 205)\n         */\n        const watcher = request.raw;\n        watchers.push(watcher);\n        watcher.req.on('close', () => {\n          watchers.splice(watchers.indexOf(watcher), 1);\n          resolve('OK');\n        });\n      }),\n  });\n\n  server.route({\n    method: 'GET',\n    path: '/reloadapp',\n    handler: () => {\n      runtime.logger.info(\n        'Attempt to reload the app, make sure you have enabled Live Reloading!'\n      );\n      notifyAllWatchers();\n      return 'OK';\n    },\n  });\n}\n"],"file":"setupLiveReload.js"}