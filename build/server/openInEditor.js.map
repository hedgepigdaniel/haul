{"version":3,"sources":["../../src/server/openInEditor.ts"],"names":["editors","Object","keys","require","isKnownEditor","editor","includes","path","basename","detectEditorType","process","env","REACT_EDITOR","undefined","detectEditorCmd","REACT_EDITOR_CMD","detectEditorPattern","REACT_EDITOR_PATTERN","editorConfig","cmd","pattern","hasValidConfig","opener","openInEditor","runtime","url","open","error","printErrorMessage","boldify","text","logger","enhanceWithModifier","greyify","enhanceWithColor","info","join"],"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","sourcesContent":["import path from 'path';\n// @ts-ignore\nimport { configure } from 'open-in-editor';\nimport Runtime from '../runtime/Runtime';\nconst editors = Object.keys(require('open-in-editor/lib/editors'));\n\n/**\n * --- OVERVIEW ---\n *\n * React Native apps show a stack trace when an error occurs. Each\n * frame can be tapped on by the user. When they do, React Native will\n * send a POST to /open-stack-frame passing along {file, lineNumber}.\n *\n * Haul should then open the user's editor to the file and lineNumber.\n *\n * What makes this gloriously fragile is, people use different editors\n * on different platforms.\n *\n * We will rely on the NPM package `open-in-editor` to provide this\n * functionality. (read: scapegoat).\n */\n\n// A configuration object fed into `open-in-editor`.\ntype OpenInEditorConfig = {\n  editor?: string;\n  cmd?: string;\n  pattern?: string;\n};\n\n// does `open-in-editor` know how to detect this editor?\nconst isKnownEditor = (editor: string): boolean =>\n  editors.includes(path.basename(editor));\n\n/**\n * Detect the editor type to use. We use just the basename in case the user\n * has passed a full path. Just the name work here though. Examples:\n *\n *   - sublime\n *   - atom\n *   - /usr/local/bin/atom\n *\n */\nfunction detectEditorType(): string | undefined {\n  if (process.env.REACT_EDITOR) {\n    const editor = path.basename(process.env.REACT_EDITOR);\n    if (isKnownEditor(editor)) {\n      return editor;\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * If provided, this will be the editor command that we shell out to. You only\n * need to use this if you've got a specific script or symlink you're trying\n * to target.\n */\nfunction detectEditorCmd(): string | undefined {\n  // the specific haul command gets precedent\n  if (process.env.REACT_EDITOR_CMD) {\n    return process.env.REACT_EDITOR_CMD;\n  }\n\n  // use REACT_EDITOR unless it's a shortcut (like just the word 'atom')\n  if (process.env.REACT_EDITOR && !isKnownEditor(process.env.REACT_EDITOR)) {\n    return process.env.REACT_EDITOR;\n  }\n\n  return undefined;\n}\n\n/**\n * If provided, this allows people to control how the arguments are passed\n * to their editor.  For example: -r -g {filename}:{line}:{column}\n */\nfunction detectEditorPattern(): string | undefined {\n  return process.env.REACT_EDITOR_PATTERN || undefined;\n}\n\n// configure the editor open library\nconst editorConfig: OpenInEditorConfig = {};\neditorConfig.editor = detectEditorType();\neditorConfig.cmd = detectEditorCmd();\n\n// null is a valid pattern, so we need to only add it if we mean it\nconst pattern = detectEditorPattern();\nif (pattern) {\n  editorConfig.pattern = pattern;\n}\n\nconst hasValidConfig = editorConfig.editor || editorConfig.cmd;\n\n// create an editor we'll use to open editor.\nconst opener = configure(editorConfig);\n\nexport default async function openInEditor(runtime: Runtime, url: string) {\n  // open it with the user's editor. the extra hasValidConfig check effectively\n  // turns off `open-in-editor`'s auto detection, which i found didn't work.\n  if (opener && hasValidConfig) {\n    try {\n      await opener.open(url);\n    } catch (error) {\n      printErrorMessage(runtime); // problem opening?\n    }\n  } else {\n    printErrorMessage(runtime);\n  }\n}\n\nfunction printErrorMessage(runtime: Runtime) {\n  const boldify = (text: string) =>\n    runtime.logger.enhanceWithModifier('bold', text);\n  const greyify = (text: string) =>\n    runtime.logger.enhanceWithColor('gray', text);\n\n  runtime.logger.error(\n    'Unable to open in editor. You can set environment variables to open your editor.'\n  );\n  runtime.logger.info(\n    [\n      ' --- Easiest (auto-detect) ---',\n      '',\n      `${boldify('export REACT_EDITOR=code')}`,\n      `${greyify('or')}`,\n      `${boldify('export REACT_EDITOR=/path/to/atom')}`,\n      '',\n      `${greyify(\n        '(sublime, atom, code, webstorm, phpstorm, idea14ce, vim, emacs, visualstudio)'\n      )}`,\n      `${greyify('via https://github.com/lahmatiy/open-in-editor')}`,\n    ].join('\\n')\n  );\n  runtime.logger.info(\n    [\n      ' --- Harder (you have a custom script or symlink) ---',\n      '',\n      `${boldify('export REACT_EDITOR=vim')}`,\n      `${boldify('export REACT_EDITOR_CMD=/usr/local/bin/nvim')}`,\n      `${boldify('export REACT_EDITOR=/path/to/atom')}`,\n      '',\n      `${greyify(\n        'You can use this if you have recognized editor, but in non-standard location.'\n      )}`,\n    ].join('\\n')\n  );\n  runtime.logger.info(\n    [\n      ' --- Hardest (completely custom -- hold my beer) ---',\n      '',\n      `${boldify('export REACT_EDITOR_CMD=/path/to/a/crazy/editor')}`,\n      `${boldify(\n        'export REACT_EDITOR_PATTERN=\"-r -g {filename}:{line}:{column}\"'\n      )}`,\n      '',\n      `${greyify(\n        'You can use this if your editor is unknown or you want to launch with different flags.'\n      )}`,\n    ].join('\\n')\n  );\n}\n"],"file":"openInEditor.js"}