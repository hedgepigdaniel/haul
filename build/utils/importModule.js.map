{"version":3,"sources":["../../src/utils/importModule.ts"],"names":["importModule","filename","options","resolve","parentModule","ignore","cache","runtime","exports","loadModule","module","nativeRequire","require","builtinModules","concat","Module","provided","moduleFilename","includes","moduleBody","fs","readFileSync","error","Error","code","paths","_resolveLookupPaths","reduce","acc","item","Array","isArray","path","dirname","id","currentResolve","createRequireFromPath","currentRequire","moduleId","test","JSON","parse","moduleFactory","vm","runInThisContext","wrap","shouldTranspile","some","ignorePattern","startsWith","transpilationResults","babel","transformSync","presets","targets","node","plugins","logger","loaded"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport path from 'path';\nimport vm from 'vm';\nimport Module from 'module';\nimport * as babel from '@babel/core';\nimport Runtime from '../runtime/Runtime';\n\ntype ModuleCache = { [id: string]: Module };\n\ntype Options = {\n  resolve: (moduleId: string) => string;\n  parentModule?: Module;\n  ignore?: Array<string | RegExp> | ((moduleId: string) => boolean);\n  cache?: ModuleCache;\n  runtime: Runtime;\n};\n\nexport default function importModule(filename: string, options: Options) {\n  const { resolve, parentModule, ignore = [], cache = {}, runtime } = options;\n\n  const exports = loadModule(filename, {\n    resolve,\n    parentModule: parentModule || module,\n    ignore,\n    cache,\n    runtime,\n  });\n\n  return {\n    exports,\n    cache,\n  };\n}\n\nconst nativeRequire = require;\nconst builtinModules = ['debug'].concat(Module.builtinModules);\n\nfunction loadModule(\n  filename: string,\n  provided: {\n    resolve: Options['resolve'];\n    parentModule: NonNullable<Options['parentModule']>;\n    ignore: NonNullable<Options['ignore']>;\n    cache: NonNullable<Options['cache']>;\n    runtime: Runtime;\n  }\n) {\n  // Resolve absolute module location using parent's resolver.\n  const moduleFilename = provided.resolve(filename);\n\n  // Use native require if requested module is a build-in one.\n  // Built-in modules are not kept in isolated cache, but in the native cache.\n  if (builtinModules.includes(moduleFilename)) {\n    return nativeRequire(moduleFilename);\n  }\n\n  // Use exports from cache is available.\n  if (provided.cache[moduleFilename]) {\n    return provided.cache[moduleFilename].exports;\n  }\n\n  let moduleBody: string;\n  try {\n    moduleBody = fs.readFileSync(moduleFilename, 'utf8');\n  } catch (error) {\n    throw new Error(\n      `Module '${filename}' resolved to '${moduleFilename}' not found: ${error.code}`\n    );\n  }\n\n  // Instantiating a new Module will setup some some properties, but won't\n  // load the module code by itself, so we can do it ourselves later.\n  const module = new Module(moduleFilename, provided.parentModule);\n  module.filename = moduleFilename;\n  // Resolve lookup paths (for example paths to node_modules for each parent directory).\n  module.paths = ((Module as unknown) as {\n    _resolveLookupPaths: (request: string, parent?: Module) => string[][];\n  })\n    ._resolveLookupPaths(module.filename, provided.parentModule)\n    .reduce(\n      (acc, item) =>\n        Array.isArray(item) ? acc.concat(...item) : acc.concat(item),\n      []\n    )\n    .concat(path.dirname(module.filename));\n  provided.cache[module.id] = module;\n\n  // Create resolver for this module.\n  const currentResolve = ((Module.createRequireFromPath(\n    module.filename\n  ) as unknown) as {\n    resolve: RequireResolve;\n  }).resolve;\n\n  // Create require function for this module.\n  const currentRequire = (moduleId: string) => {\n    return loadModule(moduleId, {\n      resolve: currentResolve,\n      parentModule: module,\n      ignore: provided.ignore,\n      cache: provided.cache,\n      runtime: provided.runtime,\n    });\n  };\n\n  // Set `resolve` and `cache` on `require` function.\n  currentRequire.resolve = currentResolve;\n  currentRequire.cache = provided.cache;\n\n  // Special case for JSON files.\n  if (/\\.json$/.test(module.filename)) {\n    module.exports = JSON.parse(moduleBody);\n  } else {\n    let moduleFactory: Function;\n    try {\n      // Try to create a module factory function. If it fails, there's a good cache that the\n      // module needs to be transpiled.\n      moduleFactory = vm.runInThisContext(Module.wrap('\\n' + moduleBody), {\n        filename: module.filename,\n      });\n    } catch (error) {\n      // Figure out if module should be transpiled.\n      let shouldTranspile = true;\n      if (typeof provided.ignore === 'function') {\n        shouldTranspile = !provided.ignore(module.filename);\n      } else {\n        shouldTranspile = !provided.ignore.some(ignorePattern => {\n          if (typeof ignorePattern === 'string') {\n            return module.filename.startsWith(ignorePattern);\n          }\n\n          return ignorePattern.test(module.filename);\n        });\n      }\n\n      // Throw original error if module ignored and thus should not be transpiled.\n      if (!shouldTranspile) {\n        throw error;\n      }\n\n      // If the parsing failed, transpile the code with babel and try again.\n      let transpilationResults: babel.BabelFileResult | null;\n      try {\n        // Use hardcoded plugins and preset, since we cannot use Babel config from project, due\n        // to different targets - project babel config might have commonjs transform disabled etc.\n        transpilationResults = babel.transformSync(moduleBody, {\n          filename: module.filename,\n          presets: [\n            [\n              require.resolve('@babel/preset-env'),\n              {\n                targets: {\n                  node: 'current',\n                },\n              },\n            ],\n            require.resolve('@babel/preset-typescript'),\n          ],\n          plugins: [\n            require.resolve('@babel/plugin-proposal-class-properties'),\n            require.resolve('@babel/plugin-transform-flow-strip-types'),\n          ],\n        });\n      } catch (error) {\n        // Transpilation failed. Babel sometimes might not print which file it was transpiling\n        // so, log it here and then throw error from Babel.\n        provided.runtime.logger.error(\n          `Failed to transpile module ${module.filename}:`\n        );\n        throw error;\n      }\n\n      if (transpilationResults && transpilationResults.code) {\n        // Try to evaluate the module factory again using transpiled code. If it fails, the\n        // error will propagate to up the stack - there's nothing we need to do.\n        moduleFactory = vm.runInThisContext(\n          Module.wrap('\\n' + transpilationResults.code),\n          {\n            filename: module.filename,\n          }\n        );\n      } else {\n        // Edge case if transpilation failed, but we don't know why.\n        throw new Error(\n          `Failed to transpile module ${module.filename} due to unknown reason`\n        );\n      }\n    }\n\n    // Evaluate the actual module's code.\n    moduleFactory(\n      module.exports,\n      currentRequire,\n      module,\n      module.filename,\n      path.dirname(module.filename)\n    );\n  }\n\n  module.loaded = true;\n  return module.exports;\n}\n"],"file":"importModule.js"}