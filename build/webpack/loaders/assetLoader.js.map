{"version":3,"sources":["../../../src/webpack/loaders/assetLoader.ts"],"names":["assetLoader","cacheable","callback","async","runtime","_runtime","Runtime","query","getOptions","config","platform","root","process","cwd","pathSepPattern","RegExp","path","sep","filePath","resourcePath","dirname","url","relative","replace","type","extname","assets","join","bundle","suffix","filename","basename","normalizedName","length","longName","toLowerCase","result","Promise","resolve","reject","fs","readdir","err","res","map","AssetResolver","collect","name","scales","Object","keys","s","Number","sort","pairs","all","scale","addDependency","readFile","logger","debug","dest","testXml","testMP4","testImages","testFonts","test","indexOf","Error","destination","content","forEach","item","outputPath","emitFile","publicPath","JSON","stringify","hashes","algorithm","info","match","isFinite","width","height","e","error","dedent","raw"],"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","sourcesContent":["import utils from 'loader-utils';\nimport size from 'image-size';\nimport path from 'path';\nimport dedent from 'dedent';\nimport hasha from 'hasha';\nimport escapeStringRegexp from 'escape-string-regexp';\nimport Runtime from '../../runtime/Runtime';\nimport AssetResolver from '../resolvers/AssetResolver';\n\ntype Config = {\n  platform: string;\n  bundle?: boolean;\n  root: string;\n  outputPath?: string | ((path: string) => string);\n  publicPath?: string | ((path: string) => string);\n};\n\nasync function assetLoader(this: any) {\n  this.cacheable();\n\n  const callback = this.async();\n  const { runtime: _runtime = new Runtime(), ...query } =\n    utils.getOptions(this) || {};\n  const runtime: Runtime = _runtime;\n  const config: Config = {\n    platform: 'ios',\n    root: process.cwd(),\n    ...query,\n  };\n  const pathSepPattern = new RegExp(`\\\\${path.sep}`, 'g');\n  const filePath: string = this.resourcePath;\n  const dirname = path.dirname(filePath);\n  // Relative path to root without any ../ due to https://github.com/callstack/haul/issues/474\n  // Assets from from outside of root, should still be placed inside bundle output directory.\n  // Example:\n  //   filePath = monorepo/node_modules/my-module/image.png\n  //   dirname  = monorepo/node_modules/my-module\n  //   root     = monorepo/packages/my-app/\n  //   url      = ../../node_modules/my-module (original)\n  // So when we calculate destination for the asset for iOS ('assets' + url + filename),\n  // it will end up outside of `assets` directory, so we have to make sure it's:\n  //   url      = node_modules/my-module (tweaked)\n  const url = path\n    .relative(config.root, dirname)\n    .replace(new RegExp(`^[\\\\.\\\\${path.sep}]+`), '');\n  const type = path.extname(filePath).replace(/^\\./, '');\n  const assets = path.join('assets', config.bundle ? '' : config.platform);\n  const suffix = `(@\\\\d+(\\\\.\\\\d+)?x)?(\\\\.(${config.platform}|native))?\\\\.${type}$`;\n  const filename = path.basename(filePath).replace(new RegExp(suffix), '');\n  const normalizedName =\n    url.length === 0\n      ? filename\n      : `${url.replace(pathSepPattern, '_')}_${filename}`;\n  const longName = `${normalizedName\n    .toLowerCase()\n    .replace(/[^a-z0-9_]/g, '')}.${type}`;\n\n  const result: string[] = await new Promise((resolve, reject) =>\n    this.fs.readdir(dirname, (err: Error | null, res: string[]) => {\n      if (err) {\n        reject(err);\n      } else {\n        resolve(res);\n      }\n    })\n  );\n\n  const map = AssetResolver.collect(result, {\n    name: filename,\n    type,\n    platform: config.platform,\n  });\n\n  const scales = Object.keys(map)\n    .map(s => Number(s.replace(/[^\\d.]/g, '')))\n    .sort();\n\n  const pairs: Array<{\n    destination: string;\n    content: string;\n  }> = await Promise.all(\n    Object.keys(map).map(scale => {\n      this.addDependency(path.join(dirname, map[scale].name));\n\n      return new Promise((resolve, reject) =>\n        this.fs.readFile(\n          path.join(dirname, map[scale].name),\n          (err: Error | null, res: any) => {\n            runtime.logger.debug(`Asset: ${scale} for ${filePath}`);\n\n            if (err) {\n              reject(err);\n            } else {\n              let dest;\n\n              if (config.bundle && config.platform === 'android') {\n                const testXml = /\\.(xml)$/;\n                const testMP4 = /\\.(mp4)$/;\n                const testImages = /\\.(png|jpg|gif|webp)$/;\n                const testFonts = /\\.(ttf|otf|ttc)$/;\n\n                // found font family\n                if (\n                  testXml.test(longName) &&\n                  res.indexOf('font-family') !== -1\n                ) {\n                  dest = 'font';\n                } else if (testFonts.test(longName)) {\n                  // font extensions\n                  dest = 'font';\n                } else if (testMP4.test(longName)) {\n                  // video files extensions\n                  dest = 'raw';\n                } else if (\n                  testImages.test(longName) ||\n                  testXml.test(longName)\n                ) {\n                  // images extensions\n                  switch (scale) {\n                    case '@0.75x':\n                      dest = 'drawable-ldpi';\n                      break;\n                    case '@1x':\n                      dest = 'drawable-mdpi';\n                      break;\n                    case '@1.5x':\n                      dest = 'drawable-hdpi';\n                      break;\n                    case '@2x':\n                      dest = 'drawable-xhdpi';\n                      break;\n                    case '@3x':\n                      dest = 'drawable-xxhdpi';\n                      break;\n                    case '@4x':\n                      dest = 'drawable-xxxhdpi';\n                      break;\n                    default:\n                      throw new Error(`Unknown scale ${scale} for ${filePath}`);\n                  }\n                } else {\n                  // everything else is going to RAW\n                  dest = 'raw';\n                }\n\n                dest = path.join(dest, longName);\n              } else {\n                const name = `${filename}${\n                  scale === '@1x' ? '' : scale\n                }.${type}`;\n                dest = path.join(assets, url, name);\n              }\n\n              runtime.logger.debug(\n                `Asset: file ${filePath} --> destination: ${dest}`\n              );\n\n              resolve({\n                destination: dest,\n                content: res,\n              });\n            }\n          }\n        )\n      );\n    })\n  );\n\n  pairs.forEach(item => {\n    let dest = item.destination;\n\n    if (config.outputPath) {\n      // support functions as outputPath to generate them dynamically\n      dest =\n        typeof config.outputPath === 'function'\n          ? config.outputPath(dest)\n          : path.join(config.outputPath, dest);\n    }\n\n    this.emitFile(dest, item.content);\n  });\n\n  let publicPath = JSON.stringify(\n    path.join(assets, url).replace(pathSepPattern, '/')\n  );\n\n  if (config.publicPath) {\n    // support functions as publicPath to generate them dynamically\n    publicPath = JSON.stringify(\n      typeof config.publicPath === 'function'\n        ? config.publicPath(url)\n        : path.join(config.publicPath, url)\n    );\n  }\n\n  const hashes = pairs.map(item =>\n    hasha(item.content, {\n      algorithm: 'md5',\n    })\n  );\n\n  let info:\n    | {\n        width: number;\n        height: number;\n        type: string;\n      }\n    | undefined;\n\n  try {\n    runtime.logger.debug(`Asset: path ${this.resourcePath}`);\n\n    info = size(this.resourcePath);\n\n    const match = path\n      .basename(this.resourcePath)\n      .match(new RegExp(`^${escapeStringRegexp(filename)}${suffix}`));\n\n    if (match && match[1]) {\n      const scale = Number(match[1].replace(/[^\\d.]/g, ''));\n\n      if (typeof scale === 'number' && Number.isFinite(scale)) {\n        info.width /= scale;\n        info.height /= scale;\n      }\n    }\n  } catch (e) {\n    // Asset is not an image\n    runtime.logger.error(`Asset: unable to process ${this.resourcePath}`);\n  }\n\n  callback(\n    null,\n    dedent`\n      var AssetRegistry = require('react-native/Libraries/Image/AssetRegistry');\n      module.exports = AssetRegistry.registerAsset({\n        __packager_asset: true,\n        scales: ${JSON.stringify(scales)},\n        name: ${JSON.stringify(filename)},\n        type: ${JSON.stringify(type)},\n        hash: ${JSON.stringify(hashes.join())},\n        httpServerLocation: ${publicPath},\n        ${\n          config.bundle ? '' : `fileSystemLocation: ${JSON.stringify(dirname)},`\n        }\n        ${info ? `height: ${info.height},` : ''}\n        ${info ? `width: ${info.width},` : ''}\n      });\n      `\n  );\n}\n\nassetLoader.raw = true;\n\nexport default assetLoader;\n"],"file":"assetLoader.js"}