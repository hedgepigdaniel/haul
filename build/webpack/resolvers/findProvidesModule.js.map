{"version":3,"sources":["../../../src/webpack/resolvers/findProvidesModule.ts"],"names":["defaultOpts","blacklist","platforms","getJSFileName","fileName","exec","getPlatformFileName","realName","extension","isPlatformExtension","indexOf","name","ignoredPlatformExtension","getProvidedModuleName","segments","split","path","sep","length","findProvidesModule","directories","opts","options","modulesMap","walk","dir","stat","fs","statSync","isDirectory","readdirSync","forEach","file","join","isFile","jsFileName","moduleName"],"mappings":"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","sourcesContent":["import fs from 'fs';\nimport path from 'path';\n\nconst defaultOpts = {\n  // An array of folders to ignore when building map of modules\n  // within given directory\n  blacklist: [\n    'node_modules',\n    '__tests__',\n    '__mocks__',\n    '__fixtures__',\n    'react-packager',\n    'androidTest',\n    'scripts',\n  ],\n  // An array of platform extensions to look for when locating\n  // modules\n  platforms: ['ios', 'android', 'native', 'web'],\n};\n\n/**\n * Returns Javascript file name or null for others\n */\nconst getJSFileName = (fileName: string) => {\n  return (/^(.*)\\.js$/.exec(fileName) || [])[1];\n};\n\n/**\n * Returns file name without platform extension (if present)\n */\nconst getPlatformFileName = (fileName: string, platforms: string[]) => {\n  // eslint-disable-next-line no-unused-vars\n  const [, realName, extension] = /^(.*)\\.(\\w+)$/.exec(fileName) || [\n    '',\n    '',\n    '',\n  ];\n\n  const isPlatformExtension = platforms.indexOf(extension) >= 0;\n\n  // StaticContainer.react would be dropped if we dont count react as a valid extension\n  return {\n    name: isPlatformExtension ? realName : fileName,\n    ignoredPlatformExtension:\n      extension && !isPlatformExtension && extension !== 'react',\n  };\n};\n\n/**\n * Returns name of the module provided by given file (if present)\n */\nconst getProvidedModuleName = (fileName: string) => {\n  // The provided module is the file name (excluding OS/platform extensions)\n  const segments = fileName.split(path.sep);\n  return segments[segments.length - 1];\n};\n\n/**\n * Recursively loops over given directories and returns a map of all\n * haste modules\n */\nexport default function findProvidesModule(directories: string[], opts = {}) {\n  const options: { blacklist: string[]; platforms: string[] } = {\n    ...defaultOpts,\n    ...opts,\n  };\n\n  const modulesMap: { [key: string]: string } = {};\n\n  const walk = (dir: string) => {\n    const stat = fs.statSync(dir);\n\n    if (stat.isDirectory()) {\n      fs.readdirSync(dir).forEach(file => {\n        if (options.blacklist.indexOf(file) >= 0) {\n          return;\n        }\n        walk(path.join(dir, file));\n      });\n      return;\n    }\n\n    if (stat.isFile()) {\n      const jsFileName = getJSFileName(dir);\n      if (!jsFileName) {\n        return;\n      }\n\n      const { name: fileName, ignoredPlatformExtension } = getPlatformFileName(\n        jsFileName,\n        options.platforms\n      );\n\n      if (ignoredPlatformExtension) {\n        return;\n      }\n\n      const moduleName = getProvidedModuleName(fileName);\n      if (!moduleName) {\n        return;\n      }\n\n      // Throw when duplicated modules are provided from a different\n      // fileName\n      /*\n      if (modulesMap[moduleName] && modulesMap[moduleName] !== fileName) {\n        throw new Error('Duplicate haste module found');\n      }\n      */\n      modulesMap[moduleName] = fileName;\n    }\n  };\n\n  directories.forEach(walk);\n\n  return modulesMap;\n}\n"],"file":"findProvidesModule.js"}